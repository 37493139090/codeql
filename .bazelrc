# allow automatic platform-specific configurations (:linux, :macos, :windows)
common --enable_platform_specific_config

# do not shut down the bazel server on idleness
startup --max_idle_secs=0
common --enable_bzlmod
# use stricter environment filtering for actions
build --incompatible_strict_action_env
# Enable verbose failures so debugging the build is easier
build --verbose_failures
# print test output, like sembuild does.
# Set to `errors` if this is too verbose.
test --test_output all

# because we use --override_module with `%workspace%`, the lock file is not stable
common --lockfile_mode=off

# when building from this repository in isolation, the internal repository will not be found at ..
# where `MODULE.bazel` looks for it. The following will get us past the module loading phase, so
# that we can build things that do not rely on that
common --override_module=semmle_code=%workspace%/misc/bazel/semmle_code_stub

build --repo_env=CC=clang --repo_env=CXX=clang++

# we use transitions that break builds of `...`, so for `test` to work with that we need the following
test --build_tests_only

# this requires developer mode, but is required to have pack installer functioning
startup --windows_enable_symlinks
common --enable_runfiles

# with the above, we can avoid building python zips which is the default on windows as that's expensive
build --nobuild_python_zip

common --registry=file:///%workspace%/misc/bazel/registry
common --registry=https://bcr.bazel.build

common --@rules_dotnet//dotnet/settings:strict_deps=false
common --experimental_isolated_extension_usages
# performance improvement on Windows
common --incompatible_use_plus_in_repo_names



try-import %workspace%/local.bazelrc
