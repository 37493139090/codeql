// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Addressable`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.canonical_paths.CanonicalPath

/**
 * INTERNAL: This module contains the fully generated definition of `Addressable` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * Something that can be addressed by a path.
   *
   * TODO: This does not yet include all possible cases.
   * INTERNAL: Do not reference the `Generated::Addressable` class directly.
   * Use the subclass `Addressable`, where the following predicates are available.
   */
  class Addressable extends Synth::TAddressable, AstNodeImpl::AstNode {
    /**
     * Gets the canonical path of this addressable, if it exists.
     *
     * INTERNAL: Do not use.
     */
    CanonicalPath getCanonicalPath() {
      result =
        Synth::convertCanonicalPathFromRaw(Synth::convertAddressableToRaw(this)
              .(Raw::Addressable)
              .getCanonicalPath())
    }

    /**
     * Holds if `getCanonicalPath()` exists.
     * INTERNAL: Do not use.
     */
    final predicate hasCanonicalPath() { exists(this.getCanonicalPath()) }
  }
}
