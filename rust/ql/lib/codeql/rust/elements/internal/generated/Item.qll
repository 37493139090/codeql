// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Item`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AddressableImpl::Impl as AddressableImpl
import codeql.rust.elements.AstNode
import codeql.rust.elements.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Item` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A Item. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::Item` class directly.
   * Use the subclass `Item`, where the following predicates are available.
   */
  class Item extends Synth::TItem, StmtImpl::Stmt, AddressableImpl::Addressable {
    /**
     * Gets the expanded attribute or procedural macro call of this item, if it exists.
     */
    AstNode getExpanded() {
      result = Synth::convertAstNodeFromRaw(Synth::convertItemToRaw(this).(Raw::Item).getExpanded())
    }

    /**
     * Holds if `getExpanded()` exists.
     */
    final predicate hasExpanded() { exists(this.getExpanded()) }
  }
}
