// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ParametrizedCanonicalPath`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.canonical_paths.internal.CanonicalPathImpl::Impl as CanonicalPathImpl
import codeql.rust.elements.canonical_paths.ModuleItemCanonicalPath
import codeql.rust.elements.canonical_paths.TypeGenericArg

/**
 * INTERNAL: This module contains the fully generated definition of `ParametrizedCanonicalPath` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::ParametrizedCanonicalPath` class directly.
   * Use the subclass `ParametrizedCanonicalPath`, where the following predicates are available.
   */
  class ParametrizedCanonicalPath extends Synth::TParametrizedCanonicalPath,
    CanonicalPathImpl::CanonicalPath
  {
    override string getAPrimaryQlClass() { result = "ParametrizedCanonicalPath" }

    /**
     * Gets the base of this parametrized canonical path.
     */
    ModuleItemCanonicalPath getBase() {
      result =
        Synth::convertModuleItemCanonicalPathFromRaw(Synth::convertParametrizedCanonicalPathToRaw(this)
              .(Raw::ParametrizedCanonicalPath)
              .getBase())
    }

    /**
     * Gets the `index`th generic argument of this parametrized canonical path (0-based).
     */
    TypeGenericArg getGenericArg(int index) {
      result =
        Synth::convertTypeGenericArgFromRaw(Synth::convertParametrizedCanonicalPathToRaw(this)
              .(Raw::ParametrizedCanonicalPath)
              .getGenericArg(index))
    }

    /**
     * Gets any of the generic arguments of this parametrized canonical path.
     */
    final TypeGenericArg getAGenericArg() { result = this.getGenericArg(_) }

    /**
     * Gets the number of generic arguments of this parametrized canonical path.
     */
    final int getNumberOfGenericArgs() { result = count(int i | exists(this.getGenericArg(i))) }
  }
}
