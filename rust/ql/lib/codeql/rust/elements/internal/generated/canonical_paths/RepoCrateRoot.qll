// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RepoCrateRoot`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.canonical_paths.internal.CrateRootImpl::Impl as CrateRootImpl
import codeql.files.FileSystem

/**
 * INTERNAL: This module contains the fully generated definition of `RepoCrateRoot` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A reference to a crate in the repository.
   * INTERNAL: Do not reference the `Generated::RepoCrateRoot` class directly.
   * Use the subclass `RepoCrateRoot`, where the following predicates are available.
   */
  class RepoCrateRoot extends Synth::TRepoCrateRoot, CrateRootImpl::CrateRoot {
    override string getAPrimaryQlClass() { result = "RepoCrateRoot" }

    /**
     * Gets the name of this repo crate root, if it exists.
     */
    string getName() {
      result = Synth::convertRepoCrateRootToRaw(this).(Raw::RepoCrateRoot).getName()
    }

    /**
     * Holds if `getName()` exists.
     */
    final predicate hasName() { exists(this.getName()) }

    /**
     * Gets the repo of this repo crate root, if it exists.
     */
    string getRepo() {
      result = Synth::convertRepoCrateRootToRaw(this).(Raw::RepoCrateRoot).getRepo()
    }

    /**
     * Holds if `getRepo()` exists.
     */
    final predicate hasRepo() { exists(this.getRepo()) }

    /**
     * Gets the source of this repo crate root.
     */
    File getSource() {
      result = Synth::convertRepoCrateRootToRaw(this).(Raw::RepoCrateRoot).getSource()
    }
  }
}
