// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TraitImplItemCanonicalPath`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.canonical_paths.internal.CanonicalPathImpl::Impl as CanonicalPathImpl
import codeql.rust.elements.canonical_paths.ParametrizedCanonicalPath
import codeql.rust.elements.canonical_paths.TypeCanonicalPath

/**
 * INTERNAL: This module contains the fully generated definition of `TraitImplItemCanonicalPath` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A canonical path for an item defined in a trait impl.
   * INTERNAL: Do not reference the `Generated::TraitImplItemCanonicalPath` class directly.
   * Use the subclass `TraitImplItemCanonicalPath`, where the following predicates are available.
   */
  class TraitImplItemCanonicalPath extends Synth::TTraitImplItemCanonicalPath,
    CanonicalPathImpl::CanonicalPath
  {
    override string getAPrimaryQlClass() { result = "TraitImplItemCanonicalPath" }

    /**
     * Gets the type path of this trait impl item canonical path.
     */
    TypeCanonicalPath getTypePath() {
      result =
        Synth::convertTypeCanonicalPathFromRaw(Synth::convertTraitImplItemCanonicalPathToRaw(this)
              .(Raw::TraitImplItemCanonicalPath)
              .getTypePath())
    }

    /**
     * Gets the trait path of this trait impl item canonical path.
     */
    ParametrizedCanonicalPath getTraitPath() {
      result =
        Synth::convertParametrizedCanonicalPathFromRaw(Synth::convertTraitImplItemCanonicalPathToRaw(this)
              .(Raw::TraitImplItemCanonicalPath)
              .getTraitPath())
    }

    /**
     * Gets the name of this trait impl item canonical path.
     */
    string getName() {
      result =
        Synth::convertTraitImplItemCanonicalPathToRaw(this)
            .(Raw::TraitImplItemCanonicalPath)
            .getName()
    }
  }
}
